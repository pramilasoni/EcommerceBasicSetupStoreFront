@using Sitecore.Mvc.Presentation
@using Sitecore.Web.UI.Controls.Common.ActionControls
@using Sitecore.Commerce.UX.Merchandising
@model RenderingModel
@{
  var actionControl = new CommerceActionControl(new DatasourceBasedParametersResolver(Model.Rendering));
  
  var userProfileKey = actionControl.GetUserProfileKey();
  var userProfileValue = Sitecore.Context.User.Profile.GetCustomProperty(userProfileKey);
  
  actionControl.Attributes["data-sc-userprofilekey"] = userProfileKey;
  actionControl.Attributes["data-sc-actionsstatus"] = string.IsNullOrEmpty(userProfileValue) ? "[]" : userProfileValue;
  
  // Removing ActionControl.js from Requires list and adding CommerceActionControl.js from CustomHandler "client"
  actionControl.Requires.Clear();
  actionControl.Requires.Script("client", "CommerceActionControl.js");

  actionControl.AppendClass("sc-actionpanel");
  actionControl.AppendClass("cs-Actions-Btn");
  actionControl.Attributes["data-bind"] = "visible: isVisible";
  var htmlAttributes = actionControl.HtmlAttributes;
  var text = actionControl.Text;

  var noText = string.IsNullOrEmpty(text) ? "noText" : string.Empty;
  
  var menu = actionControl.RenderMenu();
}                    
<div @htmlAttributes>
  <div style="display:none" class="sc-actionpanel-popup" data-bind="visible:isOpen, click: toggleIsOpen"></div>     
  <ul role="menu" class="nav actionbar"> 
   <li>
     <div class="icon-group" data-bind="foreach:favorites">
         <div class="cs-icon-div" data-bind="attr:{ 'data-sc-favid':id() }, css: visible">
             <p class="badge" data-bind="fadeVisible: counter, text: parseInt(counter()) > 99 ? '99+' : counter(), css: bubbleCount"></p>
             <a class="btn btn-default no-text" href="javascript:;" data-bind="attr: { title: tooltip().length > 0 ? tooltip : text }, css: enable">
                 <div class="sc-icon" data-bind="click: $parent.invokeFavorite, enable: isEnabled, style: { backgroundImage: iconSrc, backgroundPosition: iconBackgroundPosition }">
                 </div>
             </a>
             <div class="" data-bind="click:  $parent.invokeFavorite, style: { backgroundImage: iconSrc, backgroundPosition: iconBackgroundPosition }"></div>
         </div>
      </div>
    </li>
      <li role="menuitem">
          <div class="dropdown" data-bind="click: invokeAction">
              <a class="btn btn-default mainButton @noText" data-bind="click: toggleIsOpen, clickBubble: false">
                  <span class="dropdown-text" data-bind="text:text">@text</span>
                  <div class="sc-dropdownbutton-toggler">
                      <div class="sc-dropdownbutton-chevron" data-bind="css: { 'up': isOpen() }">
                      </div>
                  </div>
              </a>
              @Html.Raw(menu)
          </div>
      </li>
  </ul>
</div>
