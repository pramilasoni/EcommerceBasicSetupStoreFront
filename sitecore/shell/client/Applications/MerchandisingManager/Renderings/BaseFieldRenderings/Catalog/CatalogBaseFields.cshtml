@using Sitecore.Mvc
@using Sitecore.Mvc.Presentation
@using Sitecore.Web.UI.Controls.Common.UserControls
@using Sitecore.Commerce.UX.Merchandising;
@model RenderingModel
@{
    var queryTarget = Request.QueryString["target"];
    var create = Request.QueryString["create"];
    var template = Request.QueryString["template"];
    var fields = "CatalogName|StartDate|EndDate|ProductId|VariantId|Currency|WeightMeasure|DefaultLanguage|__Display name";
    var lang = Request.QueryString["lang"];
    
    if (string.IsNullOrWhiteSpace(lang))
    {
        lang = BusinessController.GetRequestUserLanguage();
    }
    
    var parameterResolver = new DatasourceBasedParametersResolver(Model.Rendering);
    var targetId = parameterResolver.GetString("TargetId");
    var parentTabId = parameterResolver.GetString("ParentTabId");
    var requiredTooltip = parameterResolver.GetString("requiredFieldTooltip");
    var controlMappingFolder = parameterResolver.GetString("ControlMappings");

    // Allow the target id to always be overriden by the query string
    if (!string.IsNullOrWhiteSpace(queryTarget))
    {
        targetId = queryTarget;
    }

    var contentDatabaseName = Sitecore.Context.ContentDatabase.Name;
    FieldRendering renderer = new FieldRendering(template, targetId, contentDatabaseName, lang, controlMappingFolder);
    
    renderer.Class = "sc-CatalogBaseFields bizToolsForms cs-basefields";
    var requirePath = string.Format("/sitecore/shell/commerce/merchandising/DynamicFormRendering/BaseFields?targetId={0}&fields={1}&dataSource={2}&scriptName={3}&lang={4}&template={5}", targetId, fields, controlMappingFolder, Model.Rendering.Parameters["Id"], lang, template);
    renderer.ControlId = Model.Rendering.Parameters["Id"];
    renderer.SetAttribute("data-bind", "visible: isVisible");
    renderer.GetString("editFunctionBody", "editFunctionBody");

    var htmlAttributes = renderer.HtmlAttributes;
}
<div @htmlAttributes data-sc-hasnested="true" data-sc-parenttabid="@parentTabId" data-sc-require="@requirePath">
    @{
        var field = renderer.GetField("CatalogName");
        var viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-6 col-sm-4 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("CatalogNameLabelPlaceholder")
                </div>
                @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fieldDisplayName="@field.DisplayName">
                    @Html.Sitecore().Placeholder("CatalogNamePlaceholder")
                   
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                }
            </div>
        }
    }

    @{
        field = renderer.GetField("__Display name");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-5 col-sm-4 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("DisplayNameLabelPlaceholder")
                </div>
               
                    @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fieldDisplayName="@field.DisplayName">
                    @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                    }
          
            </div>
        }
    }  

    @{
        field = renderer.GetField("ProductId");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-6 col-sm-3 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("ProductIdLabelPlaceholder")
                </div>
                @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fielddisplayname="@field.DisplayName">
                    @Html.Sitecore().Placeholder("ProductIdComboBoxPlaceholder")
                </div>
            }
            else if (field.CanRead)
            {
                <div style="height: 23px">
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
}
            </div>
        }
    }

    @{
        field = renderer.GetField("VariantId");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-5 col-sm-4 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("VariantIdLabelPlaceholder")
                </div>
                <div>
                    @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <div>
                    @Html.Sitecore().Placeholder("VariantIdComboBoxPlaceholder")
                </div>
            }
            else if (field.CanRead)
            {
                <span>&nbsp;</span>
                        @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
            }
                    }
                </div>
            </div>
        }
    }

    @{
        field = renderer.GetField("StartDate");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-6 col-sm-4 row-fluid ">
                    @Html.Sitecore().Placeholder("StartDateLabelPlaceholder")
                @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fielddisplayname="@field.DisplayName">
                    @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                }

            </div>
        }
    }

    @{
        field = renderer.GetField("EndDate");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-5 col-sm-3 row-fluid ">
                    @Html.Sitecore().Placeholder("EndDateLabelPlaceholder")             
                @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fielddisplayname="@field.DisplayName">
                    @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                }
            </div>
        }
    }

    @{
        field = renderer.GetField("Currency");

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-6 col-sm-4 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("CurrencyLabelPlaceholder")
                </div>
                @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fielddisplayname="@field.DisplayName">
                    @Html.Sitecore().Placeholder("CurrencyComboBoxPlaceholder")
                </div>
            }
            else if (field.CanRead)
            {
                viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                }
            </div>
        }
    }


    @{
        field = renderer.GetField("WeightMeasure");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-5 col-sm-4 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("WeightMeasureLabelPlaceholder")
                </div>
                <div>
                    @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
            }
            else if (field.CanRead)
            {
                @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
            }
                    }
                </div>
            </div>
        }
    }

    @{
        field = renderer.GetField("DefaultLanguage");
        viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            <div class="col-md-3 col-xs-5 col-sm-3 row-fluid ">
                <div style="display:inline-block;">
                    @Html.Sitecore().Placeholder("DefaultLanguageLabelPlaceholder")
                </div>
                <div data-sc-enablechild="@field.CanWrite">
                    
                    @Html.Sitecore().Placeholder("DefaultLanguageComboboxPlaceholder")
                </div>
            </div>
        }
    }
</div>
