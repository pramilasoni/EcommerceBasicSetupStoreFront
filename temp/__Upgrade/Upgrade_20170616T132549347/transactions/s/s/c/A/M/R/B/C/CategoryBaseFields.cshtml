@using Sitecore.Data
@using Sitecore.Mvc
@using Sitecore.Mvc.Presentation
@using Sitecore.Web.UI.Controls.Common.UserControls
@using Sitecore.Commerce.UX.Merchandising;
@model RenderingModel
@{
    var parameterResolver = new DatasourceBasedParametersResolver(Model.Rendering);
    var fields = "__Display name|Name|DefinitionName|Description|PrimaryParentCategory|ListPrice";
    var target = Request.QueryString["target"];
    var create = Request.QueryString["create"];
    var template = Request.QueryString["template"];
    var definitionName = string.Empty;
    var requiredTooltip = parameterResolver.GetString("requiredFieldTooltip");
    var parentTabId = parameterResolver.GetString("ParentTabId");
    var controlMappings = parameterResolver.GetString("ControlMappings");
    
    var lang = Request.QueryString["lang"];
    
    if (string.IsNullOrWhiteSpace(lang))
    {
        lang = BusinessController.GetRequestUserLanguage();
    }

    bool createMode = create == "true";

    if (!string.IsNullOrWhiteSpace(template))
    {
        definitionName = Sitecore.Context.ContentDatabase.GetTemplate(ID.Parse(template)).DisplayName;
    }

    var contentDatabaseName = Sitecore.Context.ContentDatabase.Name;
    FieldRendering renderer = new FieldRendering(template, target, contentDatabaseName, lang, controlMappings);

    renderer.Class = "sc-CategoryBaseFields bizToolsForms cs-basefields";
    var requirePath = string.Format("/sitecore/shell/commerce/merchandising/DynamicFormRendering/BaseFields?targetId={0}&fields={1}&dataSource={2}&scriptName={3}&lang={4}&template={5}", target, fields, controlMappings, Model.Rendering.Parameters["Id"], lang, template);
    renderer.ControlId = Model.Rendering.Parameters["Id"];
    renderer.SetAttribute("data-bind", "visible: isVisible");
    renderer.GetString("editFunctionBody", "editFunctionBody");

    var htmlAttributes = renderer.HtmlAttributes;
}
<div @htmlAttributes data-sc-hasnested="true" data-sc-parenttabid="@parentTabId" data-sc-require="@requirePath">
    @{
        var field = renderer.GetField("Name");
        var viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

        if (field.CanRead || field.CanWrite)
        {
            var numOfCols = "6";
            if (createMode) { numOfCols = "12"; }
                    <div class="col-md-@numOfCols row-fluid ">

                        <div style="display:inline-block;">
                            @Html.Sitecore().Placeholder("CategoryNameLabelPlaceholder")
                        </div>
                        @{
            if (field.CanWrite)
            {
                if (createMode)
                {
                    var createViewRepresentation = renderer.GetControlRepresentation("Single-Line Text");
                    <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                    <div class="isrequired details" data-sc-fieldDisplayname="@field.DisplayName">
                        @Html.Commerce().RenderView(createViewRepresentation.EditControlId.ToString(), "ID", field.Name, createViewRepresentation.EditField, field.Value)
                    </div>
                }
                else
                {
                    <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                        <div class="isrequired" data-sc-fieldDisplayname="@field.DisplayName">
                            @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                        </div>
                }
            }
            else
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                        }

                    </div>
        
        
        
                    }

                    field = renderer.GetField("DefinitionName");
                    viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

                    if (field.CanRead || field.CanWrite)
                    {
                    <div class="col-md-6 row-fluid ">
                        <div style="display:inline-block;">
                            @Html.Sitecore().Placeholder("DefinitionNameLabelPlaceholder")
                        </div>
                        @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                var definitionValue = field.Value;
                if (createMode)
                {
                    definitionValue = definitionName;
                }
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" style="height:36px;" data-sc-fieldDisplayname="@field.DisplayName">
                    @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, definitionValue)
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @{
                var definitionValue = field.Value;
                if (createMode)
                {
                    definitionValue = definitionName;
                }
                    }
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, definitionValue)
                </div>
            }
                        }
                    </div>
                    }

                    field = renderer.GetField("__Display Name");
                    viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

                    if (field.CanRead || field.CanWrite)
                    {
                    <div class="col-md-6 row-fluid ">
                        <div style="display:inline-block;">
                            @Html.Sitecore().Placeholder("DisplayNameLabelPlaceholder")
                        </div>
                        @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fieldDisplayName="@field.DisplayName">
                    @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                        }
                    </div>
                    }

                    if (!createMode)
                    {
                    field = renderer.GetField("PrimaryParentCategory");

                    if (field.CanRead || field.CanWrite)
                    {
                    <div class="col-md-6 row-fluid ">
                        <div>
                            @Html.Sitecore().Placeholder("PrimaryParentCategoryLabelPlaceholder")
                        </div>
                        <div>
                            @{
                if (field.CanWrite)
                {
                    @Html.Sitecore().Placeholder("PrimaryParentCategoryComboBoxPlaceholder")
                }
                else if (field.CanRead)
                {
                    @Html.Sitecore().Placeholder("PrimaryParentCategoryTextPlaceholder")
                }
                            }
                        </div>
                    </div>
                    }
                    }

                    field = renderer.GetField("Description");
                    viewRepresentation = renderer.GetControlRepresentation("Multi-Line Text");

                    if (field.CanRead || field.CanWrite)
                    {
                    <div class="col-md-6 row-fluid ">
                        <div style="display:inline-block;">
                            @Html.Sitecore().Placeholder("DescriptionLabelPlaceholder")
                        </div>
                        @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                <span title="@requiredTooltip" style="color: #FF0000" class="required_field">&#9679;</span>
                <div class="isrequired" data-sc-fieldDisplayname="@field.DisplayName">
                    @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                </div>
            }
            else if (field.CanRead)
            {
                <div>
                    <span>&nbsp;</span>
                    @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
                </div>
            }
                        }
                    </div>
                    }

                    field = renderer.GetField("ListPrice");
                    viewRepresentation = renderer.GetControlRepresentation(field.FieldType);

                    if (field.CanRead || field.CanWrite)
                    {

                    <div class="col-md-6 row-fluid ">
                        <div>
                            @Html.Sitecore().Placeholder("ListPriceLabelPlaceholder")
                        </div>
                        <div>
                            <span>&nbsp;</span>
                            @{
            if (renderer.Helper.Write && field.CanWrite)
            {
                @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
            }
            else if (field.CanRead)
            {
                @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value)
            }
                            }
                        </div>
                    </div>
                    }
                    }
                </div>
