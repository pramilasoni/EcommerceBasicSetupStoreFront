@using Sitecore.Mvc
@using Sitecore.Mvc.Presentation
@using Sitecore.Commerce.UX.Merchandising;
@model RenderingModel
@{
    var parameterResolver = new DatasourceBasedParametersResolver(Model.Rendering);

    var write = parameterResolver.GetString("Write"); 
    var totalColumnWidth = parameterResolver.GetString("Total Column Width"); 
    var itemId = Request.QueryString["itemId"];
    var parentTabId = parameterResolver.GetString("ParentTabId"); 
    var controlMappings = parameterResolver.GetString("ControlMappings");

    var requirePath = string.Format("/sitecore/shell/commerce/merchandising/DynamicFormRendering/InventoryFields?itemId={0}&write={1}&dataSource={2}", itemId, write, controlMappings);
    var formRenderer = new InventoryFormRendering(controlMappings, itemId, write, totalColumnWidth);
    formRenderer.ControlId = Model.Rendering.Parameters["Id"];
    formRenderer.Class = "sc-InventoryFormRenderer";

    var htmlAttributes = formRenderer.HtmlAttributes;
}
<div data-sc-hasnested="true"  @htmlAttributes data-sc-require="@requirePath">
    @{
        int columnCount = 0;
        bool rowOpen = false;
        foreach (var field in formRenderer.FieldsToRender())
        {
            var viewRepresentation = formRenderer.GetControlRepresentation(field.FieldType);
            var currentItemWidth = viewRepresentation.ColumnWidth > formRenderer.TotalColumnWidth ? formRenderer.TotalColumnWidth : viewRepresentation.ColumnWidth;

            if (columnCount + currentItemWidth > formRenderer.TotalColumnWidth || columnCount % formRenderer.TotalColumnWidth == 0)
            {
                @:</div>
                rowOpen = false;
                columnCount = 0;
            }

            if (!rowOpen)
            {
                rowOpen = true;
                @:<div class="row">
            }

            columnCount += viewRepresentation.ColumnWidth;                  
            @:<div class="cs-row @string.Format("span{0}", viewRepresentation.ColumnWidth) @string.Format("col-md-{0}", viewRepresentation.ColumnWidth)">
               <label class="sc-text-label cs-label">@field.DisplayName</label>

            if (formRenderer.Helper.Write)
            {
                if (field.IsRequired)
                {
                    <div class="isrequired bizToolsForms" data-sc-parenttabid="@parentTabId" data-sc-fielddisplayname="@field.DisplayName">
                        @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                        <span style="color: #FF0000">*</span>
                    </div>
                }
                else
                {
                    <div class="bizToolsForms" data-sc-parenttabid="@parentTabId">
                        @Html.Commerce().RenderView(viewRepresentation.EditControlId.ToString(), "ID", field.Name, viewRepresentation.EditField, field.Value)
                    </div>
                }
            }
            else
            {
                  @Html.Commerce().RenderView(viewRepresentation.ViewControlId.ToString(), "ID", field.Name, viewRepresentation.ViewField, field.Value);
            }
            @:</div>
        }       
    }
</div>